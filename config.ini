[General]

; Version of the buidl system
TEMPLATE_VERSION = 1.0.0
; Note the developer wished to write here (useful if the developer has customized the build script in some way)
NOTES = 

; represents the folder, relative to the projhect root directory, where to put the pdf and all the metadata generated by latex
BUILD_FOLDER = build
;Fodler containing all the releases generated by "make release"
RELEASE_FOLDER = releases
; represents the software represenitng the latex compiler to use
;LATEX_CC = luatex.exe
LATEX_CC = lualatex.exe
; represents the software that we will call to build the bibliography
BIBTEX_CC = bibtex.exe
; represents the softwar eused to sort the glossary
MAKEINDEX_EXE = makeglossaries-lite.exe
; the Latex root source code document that will be use as starting point of the latex build process
; The filename is relative to the project root directory
; No ".tex" extension is needed since it will be automatically appended (e.g., `main.tex` should be written as `main`)
MAIN_SRC = main
; name of the output that will be generated inside BUILD_FOLDER. No extension is needed (e.g., `main.pdf` should be written as `main`)
OUTPUT_NAME = main
; name of the file that will be generated inside RELEASE_FOLDER when a release document is added. Note that we will append to such name the version automatically
RELEASE_NAME = main
; Additional latex flags that will be used in the build process. Note that -halt-on-error and -output-directory are automatically added
; to the build process
;LATEX_FLAGS = --file-line-error --shell-escape
LATEX_FLAGS = -halt-on-error -interaction=nonstopmode -c-style-errors
; Additional latex flags that will be used in the build process when building the bibliography
BIBTEX_FLAGS = -quiet
; Path where the planutml jarfile is located within the filesystem
PLANTUML_JAR = C:\Program Files\plantuml\plantuml.1.2020.15.jar
; Path where the java binary file is located within the filesystem
JAVA_EXE = java.exe
; Hidden file containign the version of the pdf (for release only)
VERSION_FILE = .version
; If true, we will close and open the pdfreader shown in "PdfReader" entry. Otherwise, such a section will be ignored
; OPEN_CLOSE_PDFREADER = false
OPEN_CLOSE_PDFREADER = true


[PDFReader]

; the exe representing the pdf reader we want to use to open the pdf
PDF_READER_EXE = C:\Program Files (x86)\Foxit Software\Foxit Reader\FoxitReader.exe
; the terminal command flag of PDF_READER_EXE we need to use to open a particular pdf. After this command, the name of the pdf file to open will be appended.
PDF_READER_OPEN_FILE =
; true if  the pdf reader has tab support for opening and closing tabvs on the terminal. Foxi reader, for example, has tabs but has no terminal command to open and close tabs in the terinal. If true, PDF_READER_PROCESS_NAME is not used, other wise PDF_READER_CLOSE_TAB_FILE is not used
PDF_READER_SUPPORT_TAB_FILE = false
; If PDF_READER_SUPPORT_TAB_FILE is "true", the terminal command flag of PDF_READER_EXE we need to use to close a particular pdf tab WITHOUT closing the whole application (e.g., if the pdf reader has tab support, like Foxit reader). If empty, then no tab support is available
PDF_READER_CLOSE_TAB_FILE = 
; Name of the process spawn representing the pdf viewer. Unused if PDF_READER_SUPPORT_TAB_FILE is true.
PDF_READER_PROCESS_NAME = FoxitReader
